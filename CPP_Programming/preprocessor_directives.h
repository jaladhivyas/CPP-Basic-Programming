#ifndef PREPROCESSOR_DIRECTIVES_H
#define PREPROCESSOR_DIRECTIVES_H

#include <iostream>

// Preprocessor directives are lines included in the code of programs preceded by a hash sign (#).
// The preprocessor examines the code before actual compilation of code begins
// Then it resolves all these directives before any code is actually generated by
// regular statement.
// It extends only single line of codes
// No semicolon is expected on preprocessor directives
// Using backslash '\' at end of line one can extend preprocessor directive to more then one line

namespace std
{
namespace preprocessor
{

// Macro definition(#define,#undef)

// #define identifier replacement
// The preprocessor does not understand C++ proper,
// it simply replaces any occurrence of identifier by replacement in the rest of code
// Its find and replance operation

static void preprocessorMacroDef()
{
#define getmax(a,b) a>b ? a: b

int y = getmax(3,2);

// the macro last until it is undefined
#undef getmax(a,b)
 y = getmax(a,b);

// Macro definition accept two special operators # and ##
// The operator #, followed by a parameter name, is replaced
// by a string literal that contains the argument passed
#define str(x) #x
cout<<str(test)<<endl;

//The operator ## concatenates two arguments leaving no blank spaces between them
#define func(a,b) a##b
func(c,out)<<"test"<<endl;

}

// Conditional Inclusions (#ifdef, #ifndef,#if,#endif,#else and #elif)
// These directives allow to include or discard part of the code
// of a program if a certain condition is met
static void preprocessorCondiInc()
{

// #ifdef allows a section of program to be compiled only if the macro
// that is specified as the parameter is defined
#ifdef N
  int array[N]
#endif
// in this case, array declaration can be done successfully if
// N is defined using #define

//#ifndef serves for the exact opposite: the code between #ifndef and #endif
// directives is only compiled if the specified identifier has not been previously defined.
#ifndef N
 int array[N];
#endif

// Rest of the directives i.e #if, #elif,#else requires some conditions to be met
// In order for portion of code they surrond to be compiled
// Conditions #if or #elif can only evalute const expressions, including macros
// expression

#define SIZE 10

#if SIZE >10
#undef SIZE

#elif SIZE <10
#undef SIZE

#else
#undef SIZE
#define SIZE 20
#endif

// defined and !defined act as same #ifdef and #ifndef
#if defined SIZE
#define SIZE 30
#endif
}

// Line control(#line)
// Error directive (#error)
// Source file incluion (#include)
// Pragma directive (#pragma)
// Predefined Macros
static void preprocessorOtherDirectives()
{

// #ifdef allows a section of program to be compiled only if the macro
// that is specified as the parameter is defined
#ifdef N
  int array[N]
#endif
// in this case, array declaration can be done successfully if
// N is defined using #define

//#ifndef serves for the exact opposite: the code between #ifndef and #endif
// directives is only compiled if the specified identifier has not been previously defined.
#ifndef N
 int array[N];
#endif

// Rest of the directives i.e #if, #elif,#else requires some conditions to be met
// In order for portion of code they surrond to be compiled
// Conditions #if or #elif can only evalute const expressions, including macros
// expression

#define SIZE 10

#if SIZE >10
#undef SIZE

#elif SIZE <10
#undef SIZE

#else
#undef SIZE
#define SIZE 20
#endif

// defined and !defined act as same #ifdef and #ifndef
#if defined SIZE
#define SIZE 30
#endif
}


}

}


#endif // PREPROCESSOR_DIRECTIVES_H
